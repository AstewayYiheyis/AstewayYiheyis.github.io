1) 1 8 8 9 10 1

2) Global Scope is any field that is accessible from any scope in the window,
while local scope is only accessible inside the enclosing function.

3) 	a) No
	b) Yes
	c) No
	d) Yes
	e) Yes

4) 81 25

5) 10

6)var count = (function(){
	var counter = 0;
 
	return{
		add : function(){
			counter += 1;
		},
		reset : function(){
			counter = 0;
		},
    		getCounter : function(){
    			return counter;
    		}
	}
})();

7) The "free" variable is counter. A "free" variable is a variable that is neither a local variable nor an argument.

8) var make_adder = function (inc) {
	var counter = 0;

	var add = function(){
  	counter += inc;
    return counter;
  }
	
	return add;
  }	

9) Put all the names in a module.(Using the module pattern)

10) let employee = (function(){
	let name;
	let age;
	let salary;

	let setAge = function(newAge){
		age = newAge;
	}

	let setSalary = function(newSalary){
		salary = newSalary;
	}

	let setName = function(newName){
		name = newName;
	}
	
	let getAge = function(){
		return age;
	}

	let getSalary = function(){
		return salary;
	}

	let getName = function(){
		return name;
	}

	let increaseSalary = function(percentage){
		salary = parseFloat(getSalary() + (percentage/100));
	}

	let incrementAge = function(){
		age = getAge() += 1;
	}

	return{
		setAge: setAge(newAge);
		setSalary: setSalary(newSalary);
		setName: setName(newName);
		increaseSalary: increaseSalary(percentage);
		incrementAge: incrementAge();
	}
})();

11) let employee = (function(){
	let name;
	let age;
	let salary;

	let getAge = function(){
		return age;
	}

	let getSalary = function(){
		return salary;
	}

	let getName = function(){
		return name;
	}

	return{
		setAge: function(newAge){
			age = newAge;
		};

		setSalary: function(newSalary){
			salary = newSalary;
		};

		setName: function(newName){
			name = newName;
		}

		increaseSalary: function(percentage){
			salary = getSalary() + (percentage/100);
		}
		incrementAge: = function(){
			age = getAge + 1;
		}
	}
})();

12) let employee = (function(){
	let name;
	let age;
	let salary;

	let empObject = {};
	let getAge = function(){
		return age;
	}

	let getSalary = function(){
		return salary;
	}

	let getName = function(){
		return name;
	}

	empObject.setAge = function(){
		age = newAge;
	};

	empObject.setSalary = function(){
		salary = newSalary;
	};

	empObject.setName = function(newName){
		name = newName;
	};

	empObject.increaseSalary = function(percentage){
		salary = getSalary() + (percentage/100);
	}
	
	empObject.incrementAge: function(){
		age = getAge += 1;
	}
	return empObject;
})();

13) let employee = (function(){
	let name;
	let age;
	let salary;

	let setAge = function(newAge){
		age = newAge;
	}

	let setSalary = function(newSalary){
		salary = newSalary;
	}

	let setName = function(newName){
		name = newName;
	}
	
	let getAge = function(){
		return age;
	}

	let getSalary = function(){
		return salary;
	}

	let getName = function(){
		return name;
	}

	let increaseSalary = function(percentage){
		salary = parseFloat(getSalary() + (percentage/100));
	}

	let incrementAge = function(){
		age = getAge() += 1;
	}

	return{
		setAge: setAge(newAge);
		setSalary: setSalary(newSalary);
		setName: setName(newName);
		increaseSalary: increaseSalary(percentage);
		incrementAge: incrementAge();
	}
})();

var address;
employee.address = address;
employee.setAddress = function(newAddress){
	this.address = newAdress;
}
employee.getAddress = function(){
	return this.address;
}

14) Error: Hattori

15) Success: Hattori 

16)	success
	error
